<?php

namespace App\Http\Controllers\Api\v1;

use App\Http\Requests\Api\v1\OpenTestControllerStore;
use App\Http\Resources\Api\v1\OpenTestResource;
use App\Models\v1\OpenTest;
use App\Models\v1\OpenTestAnswer;
use App\Models\v1\SimpleTest;
use App\Models\v1\SimpleTestAnswer;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Schema;

class OpenTestController extends BaseController
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $subject_id = $request->get('subject_id');
        $subject_count = $request->get('test_count');
        $simple_tests = OpenTest::all()->where('subject_id', '=', $subject_id)->random()->limit($subject_count)->get();
        return $this->setData(OpenTestResource::collection($simple_tests), "");
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function store(OpenTestControllerStore $request)
    {
        $validateData = $request->validated();
        Schema::disableForeignKeyConstraints();
        OpenTestAnswer::query()->truncate();
        OpenTest::query()->truncate();
        Schema::enableForeignKeyConstraints();
        $openTestReqData = $validateData['open_test'];
        $dataTimeNow = now();
        $openTestData = [];
        foreach ($openTestReqData as $items) {
            $open_test_items = [];
            $open_test_items['title'] = $items['title'];
            $open_test_items['status_id'] = $items['status_id'];
            $open_test_items['subject_id'] = $items['status_id'];
            $open_test_items['created_at'] = $dataTimeNow;
            $open_test_items['updated_at'] = $dataTimeNow;
            $openTestData[] = $open_test_items;
        }
        $insertData = OpenTest::query()->insert($openTestData);

        $openTestAnswerReqData = $validateData['open_test_answer'];
        $openTestAnswerData = [];
        foreach ($openTestAnswerReqData as $answer) {
            $open_test_items = [];
            $open_test_items['open_test_id'] = $answer['open_test_id'];
            $open_test_items['answer_body'] = $answer['answer_body'];
            $open_test_items['is_true'] = $answer['is_true'];
            $open_test_items['created_at'] = $dataTimeNow;
            $open_test_items['updated_at'] = $dataTimeNow;
            $openTestAnswerData[] = $open_test_items;
        }
        $insertAnswerData = OpenTestAnswer::query()->insert($openTestAnswerData);
        if ($insertData === true && $insertAnswerData == true) {
            return $this->setData(true, "");
        } else {
            return $this->setErrorMessage("");
        }
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param int $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }

    function verify(Request $request)
    {
        $answers = json_decode($request->getContent());
        if (isset($answers)) {
            $arr = [];
            foreach ($answers as $answer) {
                $openTest = OpenTestAnswer::all()->where("id", $answer->id)->first();
                if (isset($openTest)) {
                    if (round($answer->answer) != round($openTest->answer_body)) {
                        $arr[] = false;
                    } else {
                        $result = -1;
                        $a = explode(".", number_format($answer->answer, 2, ".", ""))[1];
                        $b = explode(".", round($openTest->answer_body, 2))[1];
                        if ($a === $b) {
                            $result = 0;
                        } elseif ($a < $b) {
                            $diff = $b - $a;
                            $result = $diff / $b * 100;;
                        } else {
                            $diff = $a - $b;
                            $result = $diff / $a * 100;
                        }
                        if ($result !== -1 && $result <= 5) {
                            $arr[] = true;
                        } else {
                            $arr[] = false;
                        }
                    }
                } else {
                    $arr[] = false;
                }
            }
            return $this->setData($arr, "");
        }
    }
}
